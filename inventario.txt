<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventario Manager - App de Toma de Inventario</title>
    
    <!-- Librerías externas -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 0;
            background: white;
            min-height: 100vh;
        }

        .header {
            background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
            color: white;
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-size: 24px;
            margin-bottom: 5px;
        }

        .header p {
            font-size: 14px;
            opacity: 0.9;
        }

        .nav-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #ddd;
        }

        .nav-tab {
            flex: 1;
            padding: 15px 10px;
            text-align: center;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            color: #666;
            transition: all 0.3s ease;
        }

        .nav-tab.active {
            background: white;
            color: #4285f4;
            border-bottom: 3px solid #4285f4;
        }

        .tab-content {
            display: none;
            padding: 20px;
            min-height: calc(100vh - 140px);
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #4285f4;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            margin-bottom: 10px;
        }

        .btn-primary {
            background: #4285f4;
            color: white;
        }

        .btn-primary:hover {
            background: #3367d6;
            transform: translateY(-2px);
        }

        .btn-success {
            background: #34a853;
            color: white;
        }

        .btn-success:hover {
            background: #137333;
        }

        .btn-danger {
            background: #ea4335;
            color: white;
        }

        .btn-danger:hover {
            background: #d23b30;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .scanner-container {
            position: relative;
            margin-bottom: 20px;
        }

        #interactive {
            width: 100%;
            height: 300px;
            border-radius: 8px;
            overflow: hidden;
            background: #000;
        }

        .scanner-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 200px;
            height: 200px;
            border: 2px solid #4285f4;
            border-radius: 8px;
            opacity: 0.8;
        }

        .scanner-overlay::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            border: 2px solid #4285f4;
            border-radius: 8px;
            animation: scanner-pulse 2s infinite;
        }

        @keyframes scanner-pulse {
            0% { opacity: 1; }
            50% { opacity: 0.3; }
            100% { opacity: 1; }
        }

        .product-info {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #4285f4;
        }

        .product-info h3 {
            color: #4285f4;
            margin-bottom: 10px;
        }

        .product-detail {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            padding: 5px 0;
            border-bottom: 1px solid #e0e0e0;
        }

        .product-detail:last-child {
            border-bottom: none;
        }

        .product-detail strong {
            color: #555;
        }

        .inventory-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .inventory-item {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .inventory-item h4 {
            color: #4285f4;
            margin-bottom: 8px;
        }

        .inventory-meta {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            font-size: 14px;
            color: #666;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .stat-card .number {
            font-size: 24px;
            font-weight: bold;
            color: #4285f4;
        }

        .stat-card .label {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4285f4;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .floating-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #4285f4;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
        }

        .floating-btn:hover {
            transform: scale(1.1);
            background: #3367d6;
        }

        @media (max-width: 768px) {
            .header {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 20px;
            }
            
            .tab-content {
                padding: 15px;
            }
            
            .nav-tab {
                padding: 12px 8px;
                font-size: 12px;
            }
        }

        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-warehouse"></i> Inventario Manager</h1>
            <p>Sistema de Toma de Inventario con Escáner de Códigos</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('database')">
                <i class="fas fa-database"></i><br>Base de Datos
            </button>
            <button class="nav-tab" onclick="showTab('scanner')">
                <i class="fas fa-camera"></i><br>Escanear
            </button>
            <button class="nav-tab" onclick="showTab('inventory')">
                <i class="fas fa-clipboard-list"></i><br>Inventario
            </button>
            <button class="nav-tab" onclick="showTab('export')">
                <i class="fas fa-file-export"></i><br>Exportar
            </button>
        </div>

        <!-- Tab: Base de Datos -->
        <div id="database" class="tab-content active">
            <h2><i class="fas fa-plus-circle"></i> Agregar Producto</h2>
            
            <form id="productForm">
                <div class="form-group">
                    <label for="codigo">Código de Barras *</label>
                    <input type="text" id="codigo" name="codigo" required placeholder="Ingrese el código del producto">
                </div>
                
                <div class="form-group">
                    <label for="proveedor">Proveedor *</label>
                    <input type="text" id="proveedor" name="proveedor" required placeholder="Nombre del proveedor">
                </div>
                
                <div class="form-group">
                    <label for="descripcion">Descripción del Artículo *</label>
                    <input type="text" id="descripcion" name="descripcion" required placeholder="Descripción detallada del producto">
                </div>
                
                <div class="form-group">
                    <label for="inventarioReporteria">Inventario en Reportería</label>
                    <input type="number" id="inventarioReporteria" name="inventarioReporteria" step="0.01" placeholder="0.00">
                </div>
                
                <div class="form-group">
                    <label for="factorConversion">Factor de Conversión</label>
                    <input type="number" id="factorConversion" name="factorConversion" step="0.01" placeholder="1.00">
                </div>
                
                <div class="form-group">
                    <label for="cajasFardos">Cajas / Fardos</label>
                    <input type="number" id="cajasFardos" name="cajasFardos" step="0.01" placeholder="0.00">
                </div>
                
                <div class="form-group">
                    <label for="unidades">Unidades</label>
                    <input type="number" id="unidades" name="unidades" step="0.01" placeholder="0.00">
                </div>
                
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Guardar Producto
                </button>
            </form>

            <div class="stats-grid" style="margin-top: 30px;">
                <div class="stat-card">
                    <div class="number" id="totalProductos">0</div>
                    <div class="label">Productos Registrados</div>
                </div>
                <div class="stat-card">
                    <div class="number" id="productosEscaneados">0</div>
                    <div class="label">Productos Escaneados</div>
                </div>
            </div>
        </div>

        <!-- Tab: Escáner -->
        <div id="scanner" class="tab-content">
            <h2><i class="fas fa-camera"></i> Escáner de Códigos</h2>
            
            <div class="scanner-container">
                <div id="interactive" class="hidden"></div>
                <div class="scanner-overlay hidden"></div>
            </div>
            
            <button id="startScanBtn" class="btn btn-primary">
                <i class="fas fa-camera"></i> Iniciar Escáner
            </button>
            
            <button id="stopScanBtn" class="btn btn-danger hidden">
                <i class="fas fa-stop"></i> Detener Escáner
            </button>

            <div class="form-group" style="margin-top: 20px;">
                <label for="manualCode">O ingrese código manualmente:</label>
                <input type="text" id="manualCode" placeholder="Ingrese código de barras">
                <button class="btn btn-secondary" onclick="searchProduct()">
                    <i class="fas fa-search"></i> Buscar
                </button>
            </div>

            <div id="productFound" class="hidden">
                <div class="product-info">
                    <h3 id="foundProductName"></h3>
                    <div class="product-detail">
                        <span><strong>Proveedor:</strong></span>
                        <span id="foundProveedor"></span>
                    </div>
                    <div class="product-detail">
                        <span><strong>Código:</strong></span>
                        <span id="foundCodigo"></span>
                    </div>
                    <div class="product-detail">
                        <span><strong>Inventario Reportería:</strong></span>
                        <span id="foundInventarioReporteria"></span>
                    </div>
                    <div class="product-detail">
                        <span><strong>Factor Conversión:</strong></span>
                        <span id="foundFactorConversion"></span>
                    </div>
                </div>

                <h3>Conteo Físico</h3>
                <div class="form-group">
                    <label for="conteoFisicoCajas">Cajas / Fardos Contadas</label>
                    <input type="number" id="conteoFisicoCajas" step="0.01" placeholder="0.00" oninput="calcularTotales()">
                </div>
                
                <div class="form-group">
                    <label for="conteoFisicoUnidades">Unidades Contadas</label>
                    <input type="number" id="conteoFisicoUnidades" step="0.01" placeholder="0.00" oninput="calcularTotales()">
                </div>

                <div class="product-info">
                    <div class="product-detail">
                        <span><strong>Total Unidades:</strong></span>
                        <span id="totalUnidadesCalculado">0</span>
                    </div>
                    <div class="product-detail">
                        <span><strong>Diferencia:</strong></span>
                        <span id="diferenciaCalculada">0</span>
                    </div>
                </div>

                <button class="btn btn-success" onclick="guardarConteo()">
                    <i class="fas fa-check"></i> Guardar Conteo
                </button>
            </div>

            <div id="productNotFound" class="hidden">
                <div class="alert alert-danger">
                    <strong>Producto no encontrado!</strong> El código escaneado no está en la base de datos.
                </div>
            </div>
        </div>

        <!-- Tab: Inventario -->
        <div id="inventory" class="tab-content">
            <h2><i class="fas fa-clipboard-list"></i> Inventario Realizado</h2>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="number" id="itemsInventario">0</div>
                    <div class="label">Items Inventariados</div>
                </div>
                <div class="stat-card">
                    <div class="number" id="diferenciaTotal">0</div>
                    <div class="label">Diferencia Total</div>
                </div>
            </div>

            <button class="btn btn-danger" onclick="limpiarInventario()">
                <i class="fas fa-trash"></i> Limpiar Inventario
            </button>

            <div id="inventoryList" class="inventory-list"></div>
        </div>

        <!-- Tab: Exportar -->
        <div id="export" class="tab-content">
            <h2><i class="fas fa-file-export"></i> Exportar Datos</h2>
            
            <div class="alert alert-info">
                <strong>Información:</strong> Puede exportar los datos del inventario a Excel para su análisis posterior.
            </div>

            <button class="btn btn-success" onclick="exportarExcel()">
                <i class="fas fa-file-excel"></i> Exportar a Excel
            </button>

            <button class="btn btn-primary" onclick="exportarCSV()">
                <i class="fas fa-file-csv"></i> Exportar a CSV
            </button>

            <button class="btn btn-secondary" onclick="importarDatos()">
                <i class="fas fa-file-import"></i> Importar Productos (JSON)
            </button>

            <input type="file" id="importFile" accept=".json" style="display: none;" onchange="procesarImportacion()">

            <div style="margin-top: 30px;">
                <h3>Resumen de Exportación</h3>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="number" id="exportProductos">0</div>
                        <div class="label">Productos en Base</div>
                    </div>
                    <div class="stat-card">
                        <div class="number" id="exportInventario">0</div>
                        <div class="label">Items Inventariados</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>Procesando...</p>
        </div>
    </div>

    <button class="floating-btn" onclick="showTab('scanner')" title="Ir a Escáner">
        <i class="fas fa-camera"></i>
    </button>

    <script>
        // Variables globales
        let productos = JSON.parse(localStorage.getItem('productos')) || {};
        let inventario = JSON.parse(localStorage.getItem('inventario')) || [];
        let productoActual = null;
        let isScanning = false;

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            actualizarEstadisticas();
            mostrarInventario();
            actualizarEstadisticasExport();
        });

        // Manejo de formulario de productos
        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const producto = {
                codigo: formData.get('codigo'),
                proveedor: formData.get('proveedor'),
                descripcion: formData.get('descripcion'),
                inventarioReporteria: parseFloat(formData.get('inventarioReporteria')) || 0,
                factorConversion: parseFloat(formData.get('factorConversion')) || 1,
                cajasFardos: parseFloat(formData.get('cajasFardos')) || 0,
                unidades: parseFloat(formData.get('unidades')) || 0
            };

            // Calcular total de unidades
            producto.totalUnidades = (producto.cajasFardos * producto.factorConversion) + producto.unidades;
            
            productos[producto.codigo] = producto;
            localStorage.setItem('productos', JSON.stringify(productos));
            
            mostrarAlerta('Producto guardado exitosamente', 'success');
            e.target.reset();
            actualizarEstadisticas();
            actualizarEstadisticasExport();
        });

        // Función para mostrar tabs
        function showTab(tabName) {
            // Ocultar todos los tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remover clase active de todos los botones
            document.querySelectorAll('.nav-tab').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Mostrar tab seleccionado
            document.getElementById(tabName).classList.add('active');
            
            // Activar botón correspondiente
            event.target.closest('.nav-tab').classList.add('active');
            
            // Detener escáner si se cambia de tab
            if (tabName !== 'scanner' && isScanning) {
                stopScanner();
            }
        }

        // Funciones del escáner
        function startScanner() {
            const interactive = document.getElementById('interactive');
            const overlay = document.querySelector('.scanner-overlay');
            const startBtn = document.getElementById('startScanBtn');
            const stopBtn = document.getElementById('stopScanBtn');
            
            interactive.classList.remove('hidden');
            overlay.classList.remove('hidden');
            startBtn.classList.add('hidden');
            stopBtn.classList.remove('hidden');
            
            isScanning = true;
            
            Quagga.init({
                inputStream: {
                    name: "Live",
                    type: "LiveStream",
                    target: interactive,
                    constraints: {
                        width: 640,
                        height: 480,
                        facingMode: "environment"
                    }
                },
                decoder: {
                    readers: [
                        "code_128_reader",
                        "ean_reader",
                        "ean_8_reader",
                        "code_39_reader",
                        "code_39_vin_reader",
                        "codabar_reader",
                        "upc_reader",
                        "upc_e_reader",
                        "i2of5_reader"
                    ]
                }
            }, function(err) {
                if (err) {
                    console.log(err);
                    mostrarAlerta('Error al iniciar el escáner. Verifique los permisos de cámara.', 'danger');
                    stopScanner();
                    return;
                }
                Quagga.start();
            });
            
            Quagga.onDetected(function(data) {
                const code = data.codeResult.code;
                document.getElementById('manualCode').value = code;
                stopScanner();
                searchProduct(code);
            });
        }

        function stopScanner() {
            if (isScanning) {
                Quagga.stop();
                isScanning = false;
                
                const interactive = document.getElementById('interactive');
                const overlay = document.querySelector('.scanner-overlay');
                const startBtn = document.getElementById('startScanBtn');
                const stopBtn = document.getElementById('stopScanBtn');
                
                interactive.classList.add('hidden');
                overlay.classList.add('hidden');
                startBtn.classList.remove('hidden');
                stopBtn.classList.add('hidden');
            }
        }

        // Event listeners para botones del escáner
        document.getElementById('startScanBtn').addEventListener('click', startScanner);
        document.getElementById('stopScanBtn').addEventListener('click', stopScanner);

        // Función de búsqueda de productos
        function searchProduct(codigo = null) {
            const searchCode = codigo || document.getElementById('manualCode').value.trim();
            
            if (!searchCode) {
                mostrarAlerta('Ingrese un código para buscar', 'danger');
                return;
            }
            
            const producto = productos[searchCode];
            
            if (producto) {
                mostrarProductoEncontrado(producto);
            } else {
                mostrarProductoNoEncontrado();
            }
        }

        function mostrarProductoEncontrado(producto) {
            productoActual = producto;
            
            document.getElementById('foundProductName').textContent = producto.descripcion;
            document.getElementById('foundProveedor').textContent = producto.proveedor;
            document.getElementById('foundCodigo').textContent = producto.codigo;
            document.getElementById('foundInventarioReporteria').textContent = producto.inventarioReporteria;
            document.getElementById('foundFactorConversion').textContent = producto.factorConversion;
            
            document.getElementById('productFound').classList.remove('hidden');
            document.getElementById('productNotFound').classList.add('hidden');
            
            // Limpiar campos de conteo
            document.getElementById('conteoFisicoCajas').value = '';
            document.getElementById('conteoFisicoUnidades').value = '';
            calcularTotales();
        }

        function mostrarProductoNoEncontrado() {
            document.getElementById('productFound').classList.add('hidden');
            document.getElementById('productNotFound').classList.remove('hidden');
            productoActual = null;
        }

        function calcularTotales() {
            if (!productoActual) return;
            
            const cajas = parseFloat(document.getElementById('conteoFisicoCajas').value) || 0;
            const unidades = parseFloat(document.getElementById('conteoFisicoUnidades').value) || 0;
            const factor = productoActual.factorConversion || 1;
            
            const totalUnidades = (cajas * factor) + unidades;
            const diferencia = totalUnidades - productoActual.inventarioReporteria;
            
            document.getElementById('totalUnidadesCalculado').textContent = totalUnidades.toFixed(2);
            document.getElementById('diferenciaCalculada').textContent = diferencia.toFixed(2);
            
            // Colorear la diferencia
            const diferenciaElement = document.getElementById('diferenciaCalculada');
            if (diferencia > 0) {
                diferenciaElement.style.color = '#34a853';
            } else if (diferencia < 0) {
                diferenciaElement.style.color = '#ea4335';
            } else {
                diferenciaElement.style.color = '#333';
            }
        }

        function guardarConteo() {
            if (!productoActual) return;
            
            const cajas = parseFloat(document.getElementById('conteoFisicoCajas').value) || 0;
            const unidades = parseFloat(document.getElementById('conteoFisicoUnidades').value) || 0;
            const factor = productoActual.factorConversion || 1;
            const totalUnidades = (cajas * factor) + unidades;
            const diferencia = totalUnidades - productoActual.inventarioReporteria;
            
            const itemInventario = {
                ...productoActual,
                conteoFisicoCajas: cajas,
                conteoFisicoUnidades: unidades,
                totalUnidadesConteo: totalUnidades,
                diferencia: diferencia,
                fechaConteo: new Date().toISOString()
            };
            
            // Verificar si ya existe este producto en el inventario
            const index = inventario.findIndex(item => item.codigo === productoActual.codigo);
            if (index !== -1) {
                inventario[index] = itemInventario;
            } else {
                inventario.push(itemInventario);
            }
            
            localStorage.setItem('inventario', JSON.stringify(inventario));
            
            mostrarAlerta('Conteo guardado exitosamente', 'success');
            
            // Limpiar formulario
            document.getElementById('manualCode').value = '';
            document.getElementById('productFound').classList.add('hidden');
            document.getElementById('productNotFound').classList.add('hidden');
            
            actualizarEstadisticas();
            mostrarInventario();
            actualizarEstadisticasExport();
        }

        function mostrarInventario() {
            const container = document.getElementById('inventoryList');
            container.innerHTML = '';
            
            if (inventario.length === 0) {
                container.innerHTML = '<div class="alert alert-info">No hay items inventariados aún.</div>';
                return;
            }
            
            inventario.forEach((item, index) => {
                const itemElement = document.createElement('div');
                itemElement.className = 'inventory-item';
                
                const fecha = new Date(item.fechaConteo).toLocaleString();
                const diferenciaColor = item.diferencia > 0 ? '#34a853' : (item.diferencia < 0 ? '#ea4335' : '#333');
                
                itemElement.innerHTML = `
                    <h4>${item.descripcion}</h4>
                    <div class="inventory-meta">
                        <div><strong>Código:</strong> ${item.codigo}</div>
                        <div><strong>Proveedor:</strong> ${item.proveedor}</div>
                        <div><strong>Reportería:</strong> ${item.inventarioReporteria}</div>
                        <div><strong>Conteo:</strong> ${item.totalUnidadesConteo.toFixed(2)}</div>
                        <div><strong>Diferencia:</strong> <span style="color: ${diferenciaColor}">${item.diferencia.toFixed(2)}</span></div>
                        <div><strong>Fecha:</strong> ${fecha}</div>
                    </div>
                    <button class="btn btn-danger" style="margin-top: 10px; width: auto; padding: 5px 10px; font-size: 14px;" onclick="eliminarItemInventario(${index})">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                `;
                
                container.appendChild(itemElement);
            });
        }

        function eliminarItemInventario(index) {
            if (confirm('¿Está seguro de eliminar este item del inventario?')) {
                inventario.splice(index, 1);
                localStorage.setItem('inventario', JSON.stringify(inventario));
                mostrarInventario();
                actualizarEstadisticas();
                actualizarEstadisticasExport();
            }
        }

        function limpiarInventario() {
            if (confirm('¿Está seguro de limpiar todo el inventario? Esta acción no se puede deshacer.')) {
                inventario = [];
                localStorage.setItem('inventario', JSON.stringify(inventario));
                mostrarInventario();
                actualizarEstadisticas();
                actualizarEstadisticasExport();
                mostrarAlerta('Inventario limpiado exitosamente', 'success');
            }
        }

        function actualizarEstadisticas() {
            document.getElementById('totalProductos').textContent = Object.keys(productos).length;
            document.getElementById('productosEscaneados').textContent = inventario.length;
            document.getElementById('itemsInventario').textContent = inventario.length;
            
            const diferenciaTotal = inventario.reduce((total, item) => total + item.diferencia, 0);
            document.getElementById('diferenciaTotal').textContent = diferenciaTotal.toFixed(2);
        }

        function actualizarEstadisticasExport() {
            document.getElementById('exportProductos').textContent = Object.keys(productos).length;
            document.getElementById('exportInventario').textContent = inventario.length;
        }

        // Funciones de exportación
        function exportarExcel() {
            if (inventario.length === 0) {
                mostrarAlerta('No hay datos de inventario para exportar', 'danger');
                return;
            }
            
            mostrarCargando(true);
            
            setTimeout(() => {
                const ws = XLSX.utils.json_to_sheet(inventario.map(item => ({
                    'Código': item.codigo,
                    'Proveedor': item.proveedor,
                    'Descripción': item.descripcion,
                    'Inventario Reportería': item.inventarioReporteria,
                    'Factor Conversión': item.factorConversion,
                    'Cajas/Fardos Reportería': item.cajasFardos,
                    'Unidades Reportería': item.unidades,
                    'Total Unidades Reportería': item.totalUnidades,
                    'Cajas/Fardos Conteo': item.conteoFisicoCajas,
                    'Unidades Conteo': item.conteoFisicoUnidades,
                    'Total Unidades Conteo': item.totalUnidadesConteo,
                    'Diferencia': item.diferencia,
                    'Fecha Conteo': new Date(item.fechaConteo).toLocaleString()
                })));
                
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, "Inventario");
                
                const filename = `inventario_${new Date().toISOString().split('T')[0]}.xlsx`;
                XLSX.writeFile(wb, filename);
                
                mostrarCargando(false);
                mostrarAlerta('Archivo Excel exportado exitosamente', 'success');
            }, 1000);
        }

        function exportarCSV() {
            if (inventario.length === 0) {
                mostrarAlerta('No hay datos de inventario para exportar', 'danger');
                return;
            }
            
            const headers = [
                'Código', 'Proveedor', 'Descripción', 'Inventario Reportería',
                'Factor Conversión', 'Cajas/Fardos Reportería', 'Unidades Reportería',
                'Total Unidades Reportería', 'Cajas/Fardos Conteo', 'Unidades Conteo',
                'Total Unidades Conteo', 'Diferencia', 'Fecha Conteo'
            ];
            
            const csvContent = [
                headers.join(','),
                ...inventario.map(item => [
                    item.codigo,
                    `"${item.proveedor}"`,
                    `"${item.descripcion}"`,
                    item.inventarioReporteria,
                    item.factorConversion,
                    item.cajasFardos,
                    item.unidades,
                    item.totalUnidades,
                    item.conteoFisicoCajas,
                    item.conteoFisicoUnidades,
                    item.totalUnidadesConteo,
                    item.diferencia,
                    `"${new Date(item.fechaConteo).toLocaleString()}"`
                ].join(','))
            ].join('\n');
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `inventario_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            mostrarAlerta('Archivo CSV exportado exitosamente', 'success');
        }

        function importarDatos() {
            document.getElementById('importFile').click();
        }

        function procesarImportacion() {
            const file = document.getElementById('importFile').files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    
                    if (Array.isArray(importedData)) {
                        // Importar como lista de productos
                        importedData.forEach(producto => {
                            if (producto.codigo) {
                                productos[producto.codigo] = producto;
                            }
                        });
                    } else if (typeof importedData === 'object') {
                        // Importar como objeto de productos
                        productos = { ...productos, ...importedData };
                    }
                    
                    localStorage.setItem('productos', JSON.stringify(productos));
                    actualizarEstadisticas();
                    actualizarEstadisticasExport();
                    mostrarAlerta('Productos importados exitosamente', 'success');
                } catch (error) {
                    mostrarAlerta('Error al importar el archivo. Verifique el formato JSON.', 'danger');
                }
            };
            reader.readAsText(file);
        }

        function mostrarAlerta(mensaje, tipo) {
            const alerta = document.createElement('div');
            alerta.className = `alert alert-${tipo}`;
            alerta.textContent = mensaje;
            
            const container = document.querySelector('.tab-content.active');
            container.insertBefore(alerta, container.firstChild);
            
            setTimeout(() => {
                alerta.remove();
            }, 5000);
        }

        function mostrarCargando(show) {
            const loading = document.getElementById('loading');
            if (show) {
                loading.classList.add('show');
            } else {
                loading.classList.remove('show');
            }
        }

        // Registrar Service Worker para PWA
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('data:text/javascript;base64,Ly8gU2VydmljZSBXb3JrZXIgYmFzaWNvCnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCBmdW5jdGlvbihldmVudCkgewogIGV2ZW50LnJlc3BvbmRXaXRoKGZldGNoKGV2ZW50LnJlcXVlc3QpKTsKfSk7')
                .then(function(registration) {
                    console.log('SW registrado con éxito');
                }).catch(function(registrationError) {
                    console.log('SW registro falló');
                });
            });
        }
    </script>
</body>
</html>